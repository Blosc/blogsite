<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blosc Main Blog Page  (Posts about blosc plugins zfp lossy)</title><link>http://blosc.org/</link><description></description><atom:link href="http://blosc.org/categories/blosc-plugins-zfp-lossy.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:blosc@blosc.org"&gt;The Blosc Developers&lt;/a&gt; </copyright><lastBuildDate>Fri, 03 Jun 2022 11:42:01 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Announcing Support for Lossy ZFP Codec as a Plugin for C-Blosc2</title><link>http://blosc.org/posts/support-lossy-zfp/</link><dc:creator>Oscar Guiñon, Francesc Alted</dc:creator><description>&lt;section id="announcing-support-for-lossy-zfp-codec-as-a-plugin-for-c-blosc2"&gt;
&lt;h2&gt;Announcing Support for Lossy ZFP Codec as a Plugin for C-Blosc2&lt;/h2&gt;
&lt;p&gt;Blosc supports different filters and codecs for compressing data, like e.g. the lossless &lt;a class="reference external" href="https://github.com/Blosc/c-blosc2/tree/main/plugins/codecs/ndlz"&gt;NDLZ&lt;/a&gt; codec and the &lt;a class="reference external" href="https://github.com/Blosc/c-blosc2/tree/main/plugins/filters/ndcell"&gt;NDCELL&lt;/a&gt; filter.  These have been developed explicitly to be used in   multidimensional datasets (via &lt;a class="reference external" href="https://github.com/Blosc/caterva/"&gt;Caterva&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/ironArray/iarray-community"&gt;ironArray Community Edition&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, a lossy codec like &lt;a class="reference external" href="https://zfp.readthedocs.io/"&gt;ZFP&lt;/a&gt; allows for much better compression ratios at the expense of loosing some precision in floating point data.  Moreover, while NDLZ is only available for 2-dim datasets, ZFP can be used up to 4-dim datasets.&lt;/p&gt;
&lt;section id="how-zfp-works"&gt;
&lt;h3&gt;How ZFP works?&lt;/h3&gt;
&lt;p&gt;ZFP partitions datasets into cells of 4^(number of dimensions) values, i.e., 4, 16, 64, or 256 values for 1D, 2D, 3D, and 4D arrays, respectively. Each cell is then (de)compressed independently, and the resulting bit strings are concatenated into a single stream of bits.&lt;/p&gt;
&lt;p&gt;Furthermore, ZFP usually truncates each input value either to a fixed number of bits to meet a storage budget or to some variable length needed to meet a chosen error tolerance.  For more info on how this works, see &lt;a class="reference external" href="https://zfp.readthedocs.io/en/release0.5.5/overview.html"&gt;zfp overview docs&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="zfp-implementation"&gt;
&lt;h3&gt;ZFP implementation&lt;/h3&gt;
&lt;p&gt;Similarly to other registered Blosc2 official plugins, this codec is now available at the &lt;a class="reference external" href="https://github.com/Blosc/c-blosc2/tree/main/plugins/codecs/zfp"&gt;blosc2/plugins directory&lt;/a&gt; of the &lt;a class="reference external" href="https://github.com/Blosc/c-blosc2"&gt;C-Blosc2 repository&lt;/a&gt;.  However, as there are different modes for working with ZFP, there are several associated codec IDs (see later).&lt;/p&gt;
&lt;p&gt;So, in order to use ZFP, users just have to choose the ID for the desired ZFP mode between the ones listed in &lt;a class="reference external" href="https://github.com/Blosc/c-blosc2/blob/main/include/blosc2/codecs-registry.h"&gt;blosc2/codecs-registry.h&lt;/a&gt;. For more info on how the plugin selection mechanism works, see &lt;a class="reference external" href="https://www.blosc.org/posts/registering-plugins/"&gt;https://www.blosc.org/posts/registering-plugins/&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="zfp-modes"&gt;
&lt;h3&gt;ZFP modes&lt;/h3&gt;
&lt;p&gt;ZFP is a lossy codec, but it still lets the user to choose the degree of the data loss.  There are different compression modes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;BLOSC_CODEC_ZFP_FIXED_ACCURACY:&lt;/strong&gt; The user can choose the absolute error in truncation.  For example, if the desired absolute error is 0.01, each value loss must be less than or equal to 0.01. With that, if 23.0567 is a value of the original input, after compressing and decompressing this input with error=0.01, the new value must be between 23.0467 and 23.0667.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;BLOSC_CODEC_ZFP_FIXED_PRECISION:&lt;/strong&gt; The user specifies the maximum number of bit planes encoded during compression (relative error). This is, for each input value, the number of most significant bits that will be encoded.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;BLOSC_CODEC_ZFP_FIXED_RATE:&lt;/strong&gt; The user chooses the size that the compressed cells must have based on the input cell size. For example, if the cell size is 2000 bytes and user chooses ratio=50, the output cell size will be 50% of 2000 = 1000 bytes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more info, see: &lt;a class="reference external" href="https://github.com/Blosc/c-blosc2/blob/main/plugins/codecs/zfp/README.md"&gt;https://github.com/Blosc/c-blosc2/blob/main/plugins/codecs/zfp/README.md&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="benchmark-zfp-fixed-accuracy-vs-fixed-precision-vs-fixed-rate-modes"&gt;
&lt;h3&gt;Benchmark: ZFP FIXED-ACCURACY VS FIXED_PRECISION VS FIXED-RATE modes&lt;/h3&gt;
&lt;p&gt;The dataset used in this benchmark is called &lt;em&gt;precipitation_amount_1hour_Accumulation.zarr&lt;/em&gt; and has been fetched from &lt;a class="reference external" href="https://www.ecmwf.int/en/forecasts/datasets/reanalysis-datasets/era5"&gt;ERA5 database&lt;/a&gt;, which provides hourly estimates of a large number of atmospheric, land and oceanic climate variables.&lt;/p&gt;
&lt;p&gt;Specifically, the downloaded dataset in Caterva format has this parameters:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ndim = 3&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;type = float32&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;shape = [720, 721, 1440]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;chunkshape = [128, 128, 256]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;blockshape = [16, 32, 64]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next plots represent the compression results obtained by using the different ZFP modes to compress the already mentioned dataset.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is important to remark that this is a specific dataset and the codec may perform differently for other ones.&lt;/p&gt;
&lt;img alt="/images/zfp-plugin/ratio_zfp.png" class="align-center" src="http://blosc.org/images/zfp-plugin/ratio_zfp.png" style="width: 100%;"&gt;
&lt;img alt="/images/zfp-plugin/times_zfp.png" class="align-center" src="http://blosc.org/images/zfp-plugin/times_zfp.png" style="width: 100%;"&gt;
&lt;p&gt;Below the bars it is annotated what parameter is used for each test. For example, for the first column, the different compression modes are setup like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;FIXED-ACCURACY: for each input value, the absolute error is 10^(-6) = 0.000001.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FIXED-PRECISION: for each input value, only the 20 most significant bits for the mantissa will be encoded.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FIXED-RATE: the size of the output cells is 30% of the input cell size.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although the FIXED-PRECISION mode does not obtain great results, we see that with the FIXED-ACCURACY mode we do get better performance as the absolute error increases.  Similarly, we can see how the FIXED-RATE mode gets the requested ratios, which is cool but, in exchange, the amount of data loss is unknown.&lt;/p&gt;
&lt;p&gt;Also, while FIXED-ACCURACY and FIXED-RATE modes consume similar times, the FIXED-PRECISION mode, which seems to have less data loss, also takes longer to compress.  Generally speaking we can see how, the more data loss (more data truncation) achieved by a mode, the faster it operates.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="third-partition"&gt;
&lt;h3&gt;"Third partition"&lt;/h3&gt;
&lt;p&gt;One of the most appealing features of Caterva besides supporting multi-dimensionality is its implementation of a second partition, &lt;a class="reference external" href="https://www.blosc.org/posts/caterva-slicing-perf/"&gt;making slicing more efficient&lt;/a&gt;.  As one of the distinctive characteristics of ZFP is that it compresses data in independent (and small) cells, we have been toying with the idea of implementing a third partition so that slicing of thin selections or just single-point selection can be made faster.&lt;/p&gt;
&lt;p&gt;So, as part of the current ZFP implementation, we have combined the Caterva/Blosc2 partitioning (chunking and blocking) with the independent cell handling of ZFP, allowing to extract single cells within the ZFP streams (blocks in Blosc jargon). Due to the properties and limitations of the different ZFP compression modes, we have been able to implement a sort of "third partition" just for the &lt;em&gt;FIXED-RATE&lt;/em&gt; mode when used together with the &lt;a class="reference external" href="https://c-blosc2.readthedocs.io/en/latest/reference/context.html?highlight=blosc_getitem#c.blosc2_getitem_ctx"&gt;blosc2_getitem_ctx()&lt;/a&gt; function.&lt;/p&gt;
&lt;p&gt;Such a combination of the existing partitioning and single cell extraction is useful for selecting more narrowly the data to extract, saving time and memory.  As an example, below you can see a comparison of the mean times that it takes to retrieve a bunch of single elements out of different multidimensional arrays from the ERA5 dataset (see above).  Here we have used Blosc2 with a regular LZ4 codec compared against the FIXED-RATE mode of the new ZFP codec:&lt;/p&gt;
&lt;img alt="/images/zfp-plugin/zfp_fixed_rate.png" class="align-center" src="http://blosc.org/images/zfp-plugin/zfp_fixed_rate.png" style="width: 100%;"&gt;
&lt;p&gt;As you can see, using the ZFP codec in FIXED-RATE mode allows for a good improvement in speed (up to more than 2x) for retrieving single elements (or, in general an amount not exceeding the cell size) in comparison with the existing codecs (even the fastest ones, like LZ4) inside Blosc2.  As the performance improvement is of the same order than random access time of modern SSDs, we anticipate that this could be a major win in scenarios where random access is important.&lt;/p&gt;
&lt;p&gt;If you are curious on how this new functionality performs for your own datasets and computer, you can use/adapt our &lt;a class="reference external" href="https://github.com/Blosc/caterva/blob/master/bench/bench_zfp_getitem.c"&gt;benchmark code&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusions"&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;The integration of ZFP as a codec plugin will greatly enhance the capabilities of lossy compression inside C-Blosc2.  The current ZFP plugin supports different modes; if users want to specify data loss during compression, it is recommended to use the FIXED-ACCURACY or FIXED-PRECISION modes (and most specially the former because of its better compression performance).&lt;/p&gt;
&lt;p&gt;However, if the priority is to get specific compression ratios without paying too much attention to the amount of data loss, one should use the FIXED-RATE mode, which let choose the desired compression ratio.  This mode also has the advantage that a "third partition" can be used for improving random elements access speed.&lt;/p&gt;
&lt;p&gt;This work has been done thanks to a Small Development Grant from the &lt;a class="reference external" href="https://numfocus.org"&gt;NumFOCUS Foundation&lt;/a&gt;, to whom we are very grateful indeed. NumFOCUS is doing a excellent job in sponsoring scientific projects and you can donate to the Blosc project (or many others under the NumFOCUS umbrella) via its &lt;a class="reference external" href="https://numfocus.org/support#donate"&gt;donation page&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;</description><category>blosc plugins zfp lossy</category><guid>http://blosc.org/posts/support-lossy-zfp/</guid><pubDate>Fri, 11 Mar 2022 10:32:20 GMT</pubDate></item></channel></rss>